# app.py - Diet Designer Flask Web Application (Python 3.9.6) - TEXT ONLY VERSION

from flask import Flask, render_template, request, jsonify, flash, redirect, url_for
import google.generativeai as genai
from PIL import Image, ImageEnhance
import requests
from io import BytesIO
import os
import json
from datetime import datetime
import re
import uuid
from werkzeug.utils import secure_filename
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

app = Flask(__name__)
app.secret_key = 'diet-designer-secret-key-2024'
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['STATIC_FOLDER'] = 'static'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size

# Create directories if they don't exist
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['STATIC_FOLDER'], exist_ok=True)

# Configure Gemini API
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
if not GEMINI_API_KEY:
    print("‚ö†Ô∏è  Warning: GEMINI_API_KEY not found in environment variables!")
    print("üìù Create a .env file with: GEMINI_API_KEY=your_api_key_here")
else:
    genai.configure(api_key=GEMINI_API_KEY)
    print("‚úÖ Gemini API configured successfully")

class DietAnalyzer:
    def __init__(self):
        if GEMINI_API_KEY:
            self.model = genai.GenerativeModel(
                'gemini-1.5-flash',
                generation_config={
                    "max_output_tokens": 3000,
                    "temperature": 0.7,
                },
                safety_settings=[
                    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_ONLY_HIGH"},
                    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_ONLY_HIGH"},
                    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_ONLY_HIGH"},
                    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_ONLY_HIGH"}
                ]
            )
        else:
            self.model = None
    
    def enhance_image(self, img):
        """Apply basic image enhancements and fix format issues"""
        try:
            # Convert RGBA to RGB if needed
            if img.mode == 'RGBA':
                print("üîß Converting RGBA to RGB for compatibility")
                background = Image.new('RGB', img.size, (255, 255, 255))
                background.paste(img, mask=img.split()[-1])
                img = background
            elif img.mode == 'P':
                img = img.convert('RGB')
            elif img.mode not in ['RGB', 'L']:
                img = img.convert('RGB')
            
            # Enhance contrast and brightness
            enhancer = ImageEnhance.Contrast(img)
            img = enhancer.enhance(1.2)
            
            enhancer = ImageEnhance.Brightness(img)
            img = enhancer.enhance(1.1)
            
            # Resize for optimal processing
            img.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
            
            print(f"‚úÖ Image processed: {img.mode} mode, size: {img.size}")
            return img
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Image enhancement error: {e}")
            if img.mode != 'RGB':
                img = img.convert('RGB')
            return img
    
    def get_diet_info(self, dietary_goal):
        """Get comprehensive diet information"""
        diet_data = {
            "keto": {
                "name": "Ketogenic",
                "rules": "KETO RULES: <20g net carbs daily, 70-80% calories from healthy fats, moderate protein",
                "focus": "Focus on avocados, nuts, olive oil, fatty fish, low-carb vegetables",
                "icon": "ü•ë",
                "color": "#FF6B35"
            },
            "vegan": {
                "name": "Vegan",
                "rules": "VEGAN RULES: No animal products (meat, dairy, eggs, honey)",
                "focus": "Focus on legumes, nuts, seeds, whole grains, fruits, vegetables",
                "icon": "üå±",
                "color": "#4CAF50"
            },
            "paleo": {
                "name": "Paleo",
                "rules": "PALEO RULES: No processed foods, grains, legumes, dairy, refined sugar",
                "focus": "Focus on grass-fed meats, wild fish, eggs, vegetables, fruits, nuts",
                "icon": "ü•©",
                "color": "#D84315"
            },
            "mediterranean": {
                "name": "Mediterranean",
                "rules": "MEDITERRANEAN: High in olive oil, fish, vegetables, whole grains, moderate wine",
                "focus": "Focus on olive oil, fish, vegetables, legumes, whole grains, herbs",
                "icon": "ü´í",
                "color": "#1976D2"
            },
            "low-carb": {
                "name": "Low Carb",
                "rules": "LOW-CARB: <100g carbs daily, emphasis on protein and healthy fats",
                "focus": "Focus on lean proteins, healthy fats, non-starchy vegetables",
                "icon": "‚öñÔ∏è",
                "color": "#9C27B0"
            }
        }
        
        return diet_data.get(dietary_goal, {
            "name": "Healthy",
            "rules": "HEALTHY EATING: Balanced nutrition, whole foods",
            "focus": "Focus on nutrient-dense whole foods",
            "icon": "üçé",
            "color": "#607D8B"
        })
    
    def analyze_meal(self, image_path, dietary_goal, user_preferences=""):
        """Analyze meal with comprehensive AI assessment - TEXT ONLY"""
        if not self.model:
            return {"error": "Gemini API not configured. Please set GEMINI_API_KEY in .env file"}
        
        try:
            print(f"üìÇ Loading image from: {image_path}")
            
            # Load and enhance image
            img = Image.open(image_path)
            print(f"üì∑ Original image: {img.mode} mode, size: {img.size}")
            
            img = self.enhance_image(img)
            
            # Save processed image
            processed_path = image_path.replace('.', '_processed.')
            if not processed_path.lower().endswith(('.jpg', '.jpeg')):
                processed_path = processed_path + '.jpg'
            
            img.save(processed_path, 'JPEG', quality=90)
            print(f"üíæ Processed image saved: {processed_path}")
            
            diet_info = self.get_diet_info(dietary_goal)
            
            # Enhanced analysis prompt - STRUCTURED TEXT OUTPUT
            prompt = f"""**COMPREHENSIVE MEAL ANALYSIS FOR {diet_info['name'].upper()} DIET {diet_info['icon']}**

Please analyze this meal image and provide a detailed, well-structured analysis:

**üçΩÔ∏è MEAL IDENTIFICATION:**
List all visible food items with estimated portions and cooking methods.

**üìä NUTRITIONAL ESTIMATION:**
Provide estimates for:
- Total Calories: [number] kcal
- Carbohydrates: [number]g (including fiber)
- Protein: [number]g 
- Fat: [number]g
- Key vitamins/minerals present
- Sodium level: [Low/Medium/High]

**‚≠ê DIET COMPATIBILITY SCORE: [X]/10**
{diet_info['rules']}

**‚úÖ POSITIVE ASPECTS:**
- What makes this meal good for {dietary_goal} diet
- Health benefits identified
- Nutritionally strong points

**‚ö†Ô∏è AREAS FOR IMPROVEMENT:**
- What doesn't align with {dietary_goal} diet
- Specific concerns or issues
- Missing nutrients

**üîß PERSONALIZED RECOMMENDATIONS:**
{diet_info['focus']}
1. **Ingredient Modifications:** Specific swaps to make
2. **Portion Adjustments:** What to increase/decrease
3. **Preparation Changes:** Better cooking methods
4. **Additions:** What to add to make it more {dietary_goal}-friendly

**üéØ OVERALL HEALTH SCORE: [X]/10**
Explanation of why this score was given.

**üí° PERSONALIZED ADVICE:**
{f'Based on your preferences: {user_preferences}' if user_preferences else 'General recommendations for optimal nutrition'}

**üìã SUMMARY:**
One paragraph summary of the meal's suitability for {dietary_goal} diet and key takeaways.

Please be specific with numbers, practical with suggestions, and format the response clearly with the section headers shown above."""

            # Generate analysis
            response = self.model.generate_content([prompt, img])
            
            if response.text:
                # Store analysis data
                analysis_data = {
                    "timestamp": datetime.now().isoformat(),
                    "dietary_goal": dietary_goal,
                    "diet_info": diet_info,
                    "analysis": response.text,
                    "user_preferences": user_preferences,
                    "image_path": processed_path
                }
                
                print("‚úÖ Analysis completed successfully")
                return {"success": True, "analysis": response.text, "data": analysis_data}
            else:
                return {"error": "AI returned empty response. Please try again."}
                
        except Exception as e:
            print(f"‚ùå Analysis error: {str(e)}")
            return {"error": f"Analysis failed: {str(e)}"}
    
    def extract_nutrition_data(self, analysis_text):
        """Extract key numerical data for display cards"""
        nutrition_data = {}
        
        try:
            # Extract calories
            calories_match = re.search(r'calories?:?\s*(\d+)', analysis_text, re.IGNORECASE)
            if calories_match:
                nutrition_data['calories'] = int(calories_match.group(1))
            
            # Extract macronutrients
            macros = {
                'carbs': r'carbohydrates?:?\s*(\d+)g',
                'protein': r'protein:?\s*(\d+)g', 
                'fat': r'fat:?\s*(\d+)g'
            }
            
            for macro, pattern in macros.items():
                match = re.search(pattern, analysis_text, re.IGNORECASE)
                if match:
                    nutrition_data[macro] = int(match.group(1))
            
            # Extract scores
            compatibility_match = re.search(r'compatibility.*?(\d+)/10', analysis_text, re.IGNORECASE)
            if compatibility_match:
                nutrition_data['compatibility_score'] = int(compatibility_match.group(1))
                
            health_match = re.search(r'health.*?score.*?(\d+)/10', analysis_text, re.IGNORECASE)
            if health_match:
                nutrition_data['health_score'] = int(health_match.group(1))
            
            print(f"üìä Extracted nutrition data: {nutrition_data}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Data extraction warning: {e}")
        
        return nutrition_data

# Initialize analyzer
analyzer = DietAnalyzer()

@app.route('/')
def index():
    """Main page with meal analysis form"""
    return render_template('index.html')

@app.route('/analyze', methods=['POST'])
def analyze():
    """Handle meal analysis requests - TEXT ONLY VERSION"""
    try:
        image_path = None
        
        # Handle file upload
        if 'image_file' in request.files and request.files['image_file'].filename:
            file = request.files['image_file']
            if file and allowed_file(file.filename):
                filename = secure_filename(file.filename)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename_base = os.path.splitext(filename)[0]
                filename = f"{timestamp}_{filename_base}.jpg"
                image_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                
                file.save(image_path)
                print(f"üìÅ File uploaded: {image_path}")
        
        # Handle URL input
        elif request.form.get('image_url'):
            try:
                response = requests.get(request.form.get('image_url'), timeout=15)
                response.raise_for_status()
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"url_image_{timestamp}.jpg"
                image_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                
                img = Image.open(BytesIO(response.content))
                img = analyzer.enhance_image(img)
                img.save(image_path, 'JPEG', quality=90)
                print(f"üåê URL image processed and saved: {image_path}")
                
            except Exception as e:
                return jsonify({"error": f"Failed to download image: {str(e)}"})
        
        if not image_path:
            return jsonify({"error": "Please provide an image file or URL"})
        
        # Get form data
        diet_goal = request.form.get('diet_goal', 'keto')
        user_preferences = request.form.get('user_preferences', '').strip()
        
        print(f"üéØ Analyzing for {diet_goal} diet")
        
        # Analyze meal - NO CHARTS
        result = analyzer.analyze_meal(image_path, diet_goal, user_preferences)
        
        if result.get("success"):
            # Save analysis to history (without chart)
            save_to_history(result["data"], None)
            
            return jsonify({
                "success": True,
                "analysis": result["analysis"],
                "chart_url": None,  # No chart generated
                "nutrition_data": analyzer.extract_nutrition_data(result["analysis"]),
                "diet_info": analyzer.get_diet_info(diet_goal)
            })
        else:
            return jsonify(result)
            
    except Exception as e:
        print(f"‚ùå Server error: {str(e)}")
        return jsonify({"error": f"Server error: {str(e)}"})

@app.route('/history')
def history():
    """Display analysis history"""
    try:
        with open('analysis_history.json', 'r') as f:
            history_data = json.load(f)
        return render_template('history.html', history=history_data[-20:])
    except (FileNotFoundError, json.JSONDecodeError):
        return render_template('history.html', history=[])
    
# Add this route to your existing app.py file

@app.route('/clear-history', methods=['POST'])
def clear_history():
    """Clear all analysis history"""
    try:
        # Delete the history file
        if os.path.exists('analysis_history.json'):
            os.remove('analysis_history.json')
            print("üóëÔ∏è All history cleared successfully")
            return jsonify({"success": True, "message": "All history cleared successfully"})
        else:
            print("üìù No history file found")
            return jsonify({"success": True, "message": "No history to clear"})
    except Exception as e:
        print(f"‚ùå Error clearing history: {str(e)}")
        return jsonify({"success": False, "error": f"Failed to clear history: {str(e)}"})

@app.route('/delete-analysis/<int:index>', methods=['POST'])
def delete_analysis(index):
    """Delete a specific analysis by index"""
    try:
        # Load existing history
        try:
            with open('analysis_history.json', 'r') as f:
                history = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return jsonify({"success": False, "error": "No history found"})
        
        # Validate index (convert from 1-based to 0-based)
        actual_index = index - 1
        if actual_index < 0 or actual_index >= len(history):
            return jsonify({"success": False, "error": "Invalid analysis index"})
        
        # Remove the analysis
        removed = history.pop(actual_index)
        
        # Save updated history
        with open('analysis_history.json', 'w') as f:
            json.dump(history, f, indent=2)
        
        print(f"üóëÔ∏è Deleted analysis from {removed.get('timestamp', 'unknown time')}")
        return jsonify({"success": True, "message": "Analysis deleted successfully"})
        
    except Exception as e:
        print(f"‚ùå Error deleting analysis: {str(e)}")
        return jsonify({"success": False, "error": f"Failed to delete analysis: {str(e)}"})

# Optional: Clear uploaded images as well
@app.route('/clear-uploads', methods=['POST'])
def clear_uploads():
    """Clear all uploaded images"""
    try:
        uploads_dir = app.config['UPLOAD_FOLDER']
        deleted_count = 0
        
        if os.path.exists(uploads_dir):
            for filename in os.listdir(uploads_dir):
                file_path = os.path.join(uploads_dir, filename)
                if os.path.isfile(file_path):
                    os.remove(file_path)
                    deleted_count += 1
            
            print(f"üóëÔ∏è Cleared {deleted_count} uploaded files")
            return jsonify({"success": True, "message": f"Cleared {deleted_count} uploaded files"})
        else:
            return jsonify({"success": True, "message": "No uploads directory found"})
            
    except Exception as e:
        print(f"‚ùå Error clearing uploads: {str(e)}")
        return jsonify({"success": False, "error": f"Failed to clear uploads: {str(e)}"})

def save_to_history(analysis_data, chart_path):
    """Save analysis to persistent history"""
    try:
        try:
            with open('analysis_history.json', 'r') as f:
                history = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            history = []
        
        if chart_path:
            analysis_data['chart_path'] = chart_path
        
        history.append(analysis_data)
        
        if len(history) > 100:
            history = history[-100:]
        
        with open('analysis_history.json', 'w') as f:
            json.dump(history, f, indent=2)
            
        print("üíæ Analysis saved to history")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  History save error: {e}")

def allowed_file(filename):
    """Check if file extension is allowed"""
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp'}
    return ('.' in filename and 
            filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS)

if __name__ == '__main__':
    print("üçΩÔ∏è  Diet Designer Web App Starting...")
    print("üêç Python version:", __import__('sys').version)
    print("üì¶ Flask version:", __import__('flask').__version__)
    
    if GEMINI_API_KEY:
        print("‚úÖ Gemini API key configured")
    else:
        print("‚ùå Gemini API key missing - create .env file")
    
    print("üåê Starting server at: http://localhost:5050")
    print("üì± Access from mobile: http://your-ip:5050")
    print("üìù TEXT-ONLY analysis mode - No charts generated")
    
    app.run(debug=True, host='0.0.0.0', port=5050)